Site:
https://cryptoapp-by-nikossrp.netlify.app/


Tutorial:
https://youtu.be/GDa8kZLNhJ4?list=PLAfVrG6PmFJnZjgAeaVJkWx_-XByqOAOy&t=10213




Crypto currency using 2 differents APIs:
    1) https://rapidapi.com/Coinranking/api/coinranking1/
    2) https://rapidapi.com/microsoft-azure-org-microsoft-cognitive-services/api/bing-news-search1/


Built by using:
    1) React 
    2) redux    (using redux toolkit)
    3) carts -> (graphs / diagramata using charts.js)
    4) Ant Design   (it is instead of material-ui)
    5) rapidapi     (fetch dataf from 2 differents sources)


Extentions for vs code 
    icons in files (tag:icon-theme ): https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons
    tabnine pro


Bare Bones:
    1) npx create-react-app 
    2) Delete src and make an empty one 
    3) Create src/index.js 
        import React from 'react';
        import ReactDOM from 'react-dom';
        import { BrowserRouter as Router } from 'react-router-dom'; 

        import App from './App';

        ReactDOM.render(
            <Router>       -> because we are using Links components in App/Navbar, we have to use Router in here
                <App/>      -> Now our entire app can use Routers/Links, (reminder: each Route is a site)
            </Router>, 
            document.getElementById('root')
        );

    4) Create App.js 
        import React from 'react';

        const App = () => {
            return (
                <div>
                    <h1>Hello</h1>
                </div>
            );
        }
    


Create the App design and Layout

    1) npm install 
        react-router-dom
        antd                -> for design  
        @ant-design/icons   -> for icons 
        react-redux 
        @reduxjs/toolkit 
        axios               -> for api requests (GET) 
        chart.js            -> for making charts/graphs
        html-react-parser   -> to parse html data 
        millify             -> transform extremely large data into readable string
        *moment.js*    -> times and dates  (not found package ???) try npm install moment react-moment
        react-chartjs-2     -> render those charts in our react app
    
    2) App.js 

        import { Switch, Route, Link } from 'react-router-dom';
        import { Layout, Typography, Space } from 'antd';

        div.app
            div.navbar  -> top 
            div.main    -> main body 
            div.footer   -> bottom

    
    3) Create the folder components
    4) Create components/Navbar.jsx     (what is the differences between jsx and js, they are same, but jsx is for react)
    
    5) Navbar.js 
        - rafce
        - import { Button, Menu, Typography, Avatar } from 'antd';
          import { HomeOutlined, MoneyCollectOutlined, BuldOutlined, FundOutlined, MenuOutlined } from '@ant-design/icons';
          import icon from '../images/2.png'


        Find information about components in https://ant.design/

        div.nav-container 
            div.logo-container 
                // <Avatar/>     ->  Avatars can be used to represent people or objects. It supports images, Icons, or letters. (go to the page and ctr+f and search for avatar to see https://ant.design/components/avatar/#header)
                <Avatar src={icon} size="large"/>       

                Typography.Title level={2} className="logo" 
                    <Link to="/"> Cryptoverse </Link>


    6) App.js    
        import Navbar from './components/Navbar';
        import Navbar from './components/main';
        import Navbar from './components/footer';

    Note: 
        But what happen when have a lot of components to import, the code will look like a mess. It is not efficient way to import one by one.

        Efficient way: 
            Create components/index.js
                export { default as Navbar } from './Navbar';
        
        Instead of import components one by one: 
            import { Navbar } from './components'  // now all the components export from components/index can import them into to brackets.


    7) App.js

        import React from 'react';

        import { Switch, Route, Link } from 'react-router-dom';
        import { Layout, Typography, Space } from 'antd';

        import { Navbar } from './components';      // added

        div.app
            div.navbar 
                <Navbar/>   // added
            div.main   
                div.footer  

        Output should be the Cryptoverse linked in the middle of the page, the image is above 
        but we canot see it because it is white color 


    8) Create the file src/App.css 
    
    9) App.css
        copy paste the style from here https://gist.github.com/adrianhajdin/1008c664fe7896b316f5efbff8d97935

    10) App.js 
        import './App.css'; // after that the navbar changes in browser! check it out


    11) Navbar.js 

        div.nav-container 
        div.logo-container 
            <Avatar src={icon} size="large"/>       
            Typography.Title level={2} className="logo" 
                <Link to="/"> Cryptoverse </Link>

        [
        Menu theme='dark'        -> added (component from antd)  
            Menu.Item icon={<HomeOutlined/>} Home       -> https://ant.design/components/icon/
            Menu.Item icon={<FundOutlined/>} Cryptocurrencies
            Menu.Item icon={<MoneyCollectOutlined/>} Exchanges
            Menu.Item icon={<BulbOutlined/>} News
        ]
        
        The above method will remove to the next version of antd so we have to use:
        ---------------------------------------------------------------------------------

        const menuItems = [
            {
                key: 'home',
                icon: <HomeOutlined/>,
                label: 'Home',
            },

            {
                key: 'cryptocurrencies',
                icon: <FundOutlined/>,
                label: 'Cryptocurrencies',

            },
            {
                key: 'exchanges',
                icon: <MoneyCollectOutlined/>,
                label: 'Cryptocurrencies',
            },
            {
                key: 'news',
                icon: <BulbOutlined/>,
                label: 'News',
            },
        
        ];

        div.nav-container 
        div.logo-container 
            <Avatar src={icon} size="large"/>       
            Typography.Title level={2} className="logo" 
                <Link to="/"> Cryptoverse </Link>

            <Menu theme="dark" items={menuItems}/>

                


    So we finished with Navbar
    Notice that when you click on one option e.g Exchanges the url from localhost:xxx become localhost:xxx/Exchanges
    But where is the link for Exchanges?? we need a new Route! for all fo them!


    12) App.js 

        import React from 'react';

        import { Routes, Route, Link } from 'react-router-dom';     // Routes is instead of Switch
        import { Layout, Typography, Space } from 'antd';

        import { Navbar, Homepage, Exchanges, Cryptocyrrencies, CryptoDetails, News } from './components';      // added

        div.app
            div.navbar 
                <Navbar/>   // added
            div.main 
                <Layout>    // added (This component lays everything down)
                    div.routes  // added
                        <Routes>       //added                                      // added (Switch allows us to have multiple Routes)
                            <Routes exact path="/" element={<Homepage/>}/>  //added (Exact mean it's only going to trigger if you go exactly to that url)
                            <Routes exact path="/exchanges" element={<Exchanges />}/>                //added (Exact mean it's only going to trigger if you go exactly to that url)
                            <Routes exact path="/cryptocurrencies" element={Cryptocurrencies />}/>         //added (Exact mean it's only going to trigger if you go exactly to that url)
                            <Routes exact path="/crypto/:coinId" element={<CryptoDetails /> }/>           //added (Exact mean it's only going to trigger if you go exactly to that url)
                                                   // :coinId means that will be dynamic 
                            <Routes exact path="/news" element={<News />}/>                     //added (Exact mean it's only going to trigger if you go exactly to that url)
                        </Routes>
                <Layout/>  

                div.footer  

        * So each route is a new site!!!
        

    13) Create compoments:
        components / Homepage
            import React from 'react';

            const Homepage = () => {
            return (
                <div>
                    Homepage
                </div>
            )
            }
            export default Homepage;

        components / Exchanges

        import React from 'react';

        const Exchanges = () => {
        return (
            <div>
                Exchanges
            </div>
        )
        }
        export default Exchanges;

        components / Cryptocurrencies
        ..same as the previous component
        components / CryptoDetails
        ..same as the previous component
        components / News
        ..same as the previous component
    

    14) When you press a option from menu, e.g Cryptocurrencies we dont see the Cryptocurrencies text 
    because we have a style issue. 

    15) You have to go to src/index.js and 
        import 'antd/dist/antd.min.css';
        And that will make our site looks great! (Notice when you switch to routes browser don't load the page but the url changes! )

    
    16) App.js (create the footer)
        .....

        div.footer  
            <Typography.Title  level={5} style={{ color:'white', textAlign: 'center' }}>        -> level is like h1/h2/h3/h4/h5
                Cryptoverse <br/>
                All rights reserverd
            </Typography.Title>
            <Space>                         ->  This is for space between  Home Exchanges News, if we remove it, it will be horizontal
                <Link to="/">Home</Link>
                <Link to="/exchanges">Exchanges</Link>
                <Link to="/news">News</Link>
            </Space>



Redux
Functionality of this application  (fetch data from rapid api using redux toolkit / redux toolkit query)
    1) Building out the homepage

    2) Homepage.jsx
        import React from 'react';
        import millify from 'millify';           -> this package will format our numbers
        import { Typography, Row, Col, Statistic } from 'antd';      
        import {Link} from 'react-router-dom';
        
        const {Title} = Typography;     // instead of write many times Typography.Title now we can just write <Title></Title>

        <>
            Title.heading
                Global Crypto Stats 
            Row
                Col span={12}               -> 12 spaces, there are total 24 spaces, so when we write 12 spaces it will take the half of thw width of the screen
                    <Statistic title="Total Cryptocurrencies value="5"/>    -> it is a simple div with title and value below
                Col span={12}               -> 12 spaces, there are total 24 spaces, so when we write 12 spaces it will take the half of thw width of the screen
                    <Statistic title.../>    -> it is a simple div with title and value below
                Col span={12}               -> 12 spaces, there are total 24 spaces, so when we write 12 spaces it will take the half of thw width of the screen
                    <Statistic title.../>   -> it is a simple div with title and value below
                Col span={12}               -> 12 spaces, there are total 24 spaces, so when we write 12 spaces it will take the half of thw width of the screen
                    <Statistic title.../>
                Col span={12}               -> 12 spaces, there are total 24 spaces, so when we write 12 spaces it will take the half of thw width of the screen
                    <Statistic title.../>
        </>


    3) Fetch real data from rapid api using redux toolkit (https://redux.js.org/)
        Go to rapidapi.com/hub and search for coinranking (https://rapidapi.com/Coinranking/api/coinranking1/)
        
        Create the folder src/services 
        And create the file src/services/cryptoApi.js


    4) crypto.js

        Go to rapidapi.com and search for Coinranking. 
        in the field Coins > Get coin exchanges press the test Endpoint
        
        on site Coins > Get coins exchanges press the test endpoint button and copy the code

        code should look like that: 
            const axios = require("axios");

            const options = {
                method: 'GET',
                url: 'https://coinranking1.p.rapidapi.com/coin/Qwsogvtv82FCd/exchanges',
                params: {
                    referenceCurrencyUuid: 'yhjMzLPhuIDl',
                    limit: '50',
                    offset: '0',
                    orderBy: '24hVolume',
                    orderDirection: 'desc'
                },
                headers: {
                    'X-RapidAPI-Key': 'bbff6db302mshe9ad257e1c0d6b1p142be7jsn4a1def8fee8a',
                    'X-RapidAPI-Host': 'coinranking1.p.rapidapi.com'
                }
            };

        Before we fetch the data from the api we need to create a store for our redux application.

        Create the folder and file src/app/store.js
    


    5) sotre.js 
        import { configureStore } from @reduxjs/toolkit

        export default configureStore({
            reducer: {},
        })
    


    6) stc/index.js
        add the lines:
        ...
        import { Provider } from 'react-redux'; // added 
        ...

        import store from './app/store'     // added

        
        ReactDOM.render(
            <Router> 
                <Provider store={store}>        // added
                    <App/>          // Our entire app is inside of the provider which means that every single component inside in this <App/> will have access to the sore variable
                </Provider>                     // added 
            </Router>, 
            document.getElementById('root')
        );
    


    7) cryptoApi.js
        develop the code:

        import { createApi, fetchBaseQeury } from '@redux/toolkit/query/react';

        const cryptoApiHeaders = {
            'X-RapidAPI-Host': 'coinranking1.p.rapidapi.com',       
            'X-RapidAPI-Key': 'bbff6db302mshe9ad257e1c0d6b1p142be7jsn4a1def8fee8a'
            
        };

        const baseUrl = 'https://coinranking1.p.rapidapi.com/coin/Qwsogvtv82FCd/exchanges';

        //the above lines of code has been taken from coinranking > Get coin exchanges on rapidapi.com
    
        export const cryptoApi = createApi({
            reducerPath: 'cryptoApi',         // we have to say what is this reducer for
            baseQuery: fetchBase
            endpoint: (builder) => ({
                getCryptos: builder.query({         //specify the names of the endpoints , you can name it anything you want.
                    query: () => '/exchanges'       // but if we want to do this requests we need to pass the hearders too.
                })  
            })
        });
    


    8) src/services/crypto.js
    
        import { createApi, fetchBaseQeury } from '@redux/toolkit/query';

        const cryptoApiHeaders = {
            'X-RapidAPI-Key': 'bbff6db302mshe9ad257e1c0d6b1p142be7jsn4a1def8fee8a',
            'X-RapidAPI-Host': 'coinranking1.p.rapidapi.com'
            
        };

        const baseUrl = 'https://coinranking1.p.rapidapi.com';
        
        const createRequest = (url) => ({ url, header: cryptoApiHeaders });     // added
    
        export const cryptoApi = createApi({
            reducerPath: 'cryptoApi',       
            baseQuery: fetchBase
            endpoint: (builder) => ({
                getCryptos: builder.query({         
                    query: () => createRequest('/coins')        // added    This will add in to our url /coins and it will go to https://rapidapi.com/Coinranking/api/coinranking1/ in field Coins?Get coins
                })  
            })
        });
    

        We need to find the way to connect this api to the store!!
        

    9) src/app/store.js

        import { configureStore } from '@reduxjs/toolkit';
        import { cryptoApi } from '../services/cryptoApi';

        export default configureStore({
            reducer: {
                [cryptoApi.reducerPath] : cryptoApi.reducer     // redux is doing the whole job for you, you just need to specify this for every single reducer that you create.
            },
        });

    
    10) Reminder: We need to take data to fill  on src/components/Homepage.jsx the values Total Cryptocurrenceis, Total Exchanges, .... etc.
        How can we get that data?????
        These data is coming from a specific endpoint and in this case we have called this endpoint getCryptos
        The actual endpoint we are looking for is the /coins



    11) cryptoApi.js 

        ......

        export const {
          useGetCryptosQuery,       // redux toolkit actual creates a hook that you can call instantly to get all the data for your query.
                                    //They also give you loading states finalized stats and everything else you need while making api calls.
        // They hook made as: use + Endpoint + Query so that's why  useGetCryptosQuery 
    
        } = cryptoApi;
    
        Now we can just import this to the Homepage.jsx
    


    12) src/componets/Homepage.jsx 

        ...

        import { useGetCryptosQuery } from '../services/cryptoApi'

        ...

        const Homepage = () => {

            const {data, isFetching } = useGetCryptosQuery();       //redux gave us isFetching state
            console.log(data)       // return this data to console

            return(
                ...
            )
        }


        Go to site, press f12 and fo to the console at the right side choose the option messages or info to see the data.
        So what we keep from here? without a lot of code we have manaded to create a hook! (useGetCryptosQuery())

        But now we have only one request, we will keep the code on the cryptoApi.js to make more requests like the request getCryptos.
        
        We saw that some data is undefined that's why redux toolkit automatically gives us the fetching variable 
        that we can check and then we will see how to use the data!!




    13) src/components/Homepage.jsx 
        ...

        import { useGetCryptosQuery } from '../services/cryptoApi'

        ...

        const Homepage = () => {

            const {data, isFetching } = useGetCryptosQuery();       //redux gave us isFetching state
            const globalStats = data?.data?.stats                   // get the data about stats the first data is the variable and the second one is the data in the console where we see and the stats is inside to that data.

            if (isFetching) return 'Loading...';            //added instead of undefined now this will return Loading...

            return(
                ...
            )
        }

        And now we have the stats and we can pass them into to the components with titles = Total Cryptocurrencies, Total Exchanges...etc 




    14) src/components/Homepage.jsx 
        Add data to the components 

        const [data, isFetching] = useGetCryptosQuery();
        const globalStats = data?.data?.stats                   

        if (isFetching) return 'Loading...';            

        <>
            Title.heading
                Global Crypto Stats 
            Row
                Col span={12}               
                    <Statistic title="Total Cryptocurrencies value={globalStats.total}/>    // that will display a number to Above the title Total Cryptocurrencies.  
                Col span={12}               
                    <Statistic title.../>    
                Col span={12}               
                    <Statistic title.../>   
                Col span={12}               
                    <Statistic title.../>
                Col span={12}               
                    <Statistic title.../>
        </>


        So the output on site will be something like that: 

        Total Cryptocurrencies  Total Exchanges 
            14,516                  177

        Total Market Cap  
        981,760,411,439             -> As you can see here this number is too long what we can do?? millify



        So to the others we will add the millify, so it will look like: 

        <>
            Title.heading
                Global Crypto Stats 
            Row
                Col span={12}               
                    <Statistic title="Total Cryptocurrencies value={globalStats.total}/>    // that will display a number to Above the title Total Cryptocurrencies.  
                Col span={12}               
                    <Statistic title="Total Exchanges" value ={millify(globalStats.totalExchanges)}/>    
                ......
        </>

        This will make the output looks like this: 

        Total Cryptocurrencies  Total Exchanges 
        14,516                  177

        Total Market Cap  
        981B            
        
        Total Markets  
            27.8 K




    15) src/components/Homepage.jsx
        Now we will fetch data about each specific cryptocurrency map over it and display it!
        

        import {Cryptocurrencies, News from '../components';        -> for using Cryptocurrencies, News
        //Remember that we have export the componenets from a file named components/index.js so we dont need to tell exactly the file. because it is named index!!
        ...
        <>
            Title.heading
            Row 
                Col ..
                Col ..
                ...
            Row
            
            div.home-heading-container 
                Title.home-title Top 10 Cryptocurrencies    ->reminder Title = Typography.Title look the file Homepage to see how we have done that.
                Title.show-more Show More
            div
            <Cryptocurrencies simplified/>         -> This is our component, simplified is a prop (until now this should be a text which is say "Cryptocurrenceis")
            
            div.home-heading-container 
                Title.home-title 
                    Latest News    
                Title.show-more 
                    Show More
            div
            <News simplified/>         -> On our homepage we want to show 10 first cryptocurrenceis and 10 first news, so with the variable simplified we will able to change it to only show 10 and not 100
        </>

    

    16) Cryptocurrencies.jsx
        At the site now insead of the actually cryptocurrencies we have just a text which is say "Cryptocurrencies"
        So now we will render the data for Cryptocurrencies

        import React, { useState } from 'react';
        import millify from 'millify';
        import { Link } from 'react-router-dom';
        import {Card, Row, Col, Input} from 'antd';
        import { useGetCryptosQuery } from '../services/cryptoApi';



        const Cryptocurrencies = () => {

        const {data: cryptosList, isFetching} = useGetCryptosQuery();
        // const cryptos = cryptosList?.data?.coins;         -> we dont need just that we are going to use the map function, look below
        const [cryptos, setCryptos] = useState(cryptosList?.data?.coins);

        console.log(cryptos);

            return (
                <div>
                    Cryptocurrencies
                </div>
            );
        }

        export default Cryptocurrencies;


        Now you can go to console to see the list of 50 cryptocurrencies
    


    17)  Cryptocurrencies.jsx

        return (
            Row gutter={[35, 35]} className="crypto-card-container"      // gutters are just simply some spaces in between the items (top-bottom, left-right)
                // lets analyzing the parentheseis!!
                {                      -> bracket for dynamic code 
                    cryptos.map(
                        (currency) => (     -> with that argument we can take each specific crypto currency
                            Col xs={24}       -> xs mean how wide is it going to be on extra small devices (we put 24 because mobile devices aren't wirde enougth for more on the same row)
                                sm = {12}   -> sall devices 
                                lg = {6} -> large devices 
                                className="crypto-card"
                                key             -> we need the key because we are looping over something
                        )           -> This mean that we will instantly return something! this isn't (currency) => {...} 
                    )               -> map-function parentheses
                }                   -> bracket for dynamic code
        )
    


    18) Cryptocurrencies.jsx 

        return( 
            Row
                {cryptos.map(       // fething the data from coinranking and create cards with these data
                    Col ...
                        Link to ={`/crypto/${currency.uuid}`}       // with that when we click the card we will go to the CryptoDetails in there we will have all the details for the specific cryptocurrency.
                            <Card title = {`${currency.rank}. ${currency.name}`}  
                                extra = {<img className="crypto-image"> src = {currency.iconUrl}}
                                hoverable>
                              p Price           -> All these are features that you can find in coinranking/Coins/Get coins for each coin
                              p Market Cap
                              p Daily Change
                            <Card/>


                )}
        )
    
        On homepage we want to be only the 10 first cards not all!! How we will do that?
        We will specify a count.


    19) Cryptocurrencies.jsx

        const Cryptocurrencies = ({simplified}) => {
            
            const count = simplified ? 10 : 100;        // that will tell us how many cards to show you , if this simplified is true it will show you 10 cards
            
            const {data: cryptosList, isFetching} = useGetCryptosQuery(count);      // added the argument count
            const [cryptos, setCryptos] = useState(cryptosList?.data?.coins);       // sometimes this cryptoList is going to be undefined

            if (isFetching) return 'Loading...';

            Row             
                {crypto?.map(..)                    // sometimes this cryptoList is going to be undefined because of that we put a question mark there!

                }
        }

        This argument in useGetCryptosQuery(count) must add on cryptoApi.js



    20) Homepage.jsx 

        So now we have the simplified value and we can add it on the components 

        ...

        div.home-heading-container
            Title 
                Top 10 Cryptocurrencies in the world 
            Title
                Show More 
           // Cryptocurrencies simplified = {true}
            Cryptocurrencies simplified        // default is true, we dont need to add the value

        div.home-heading-container
            Title 
                Top 10 Cryptocurrencies in the world 
            Title
                Show More 
            //News simplified = {true}
            News simplified             // default is true, we dont need to add the value


            

    21) cryptoApi.js

        .......

        endpoints: (builder) => ({
            getCryptos: builder.query({
                query: (count) => createRequest(`/coins?limit=${count}`),   // added the argument count
            }) 
        })

        ...
    

    22) Homepage.jsx 

        ..... 

        const Homepage = () => { 
            const { data, isFetching } = useGetCryptosQuery(10);    // we have to add the argument 
            const globalStats = data?.data?.stats;

            ....

         }


        Until now all should work find (Cryptocurrencies and Homepage sites, we should be able to see all the cards with crypto currencies based on the simplified value)
        But we need to add a filter  


 
    23) Cryptocurrencies.jsx 
        Add a filter  to show only the cyrptocurrencies that we want based on filter.

        import Reacct, {useState} from 'react';
        ...

        const Cryptocurrencies = ({simplified}) => {
            
            ...

            const [search, setSearchTerm] = useState('')

            ...

            return (
                <>
                    div.search-crypto
                        <Input placeholder="Search cryptocurrency onChange={(e) => setSearchTerm(e.target.value)/>  // when we are changing the setSearchTerm we want to do something so we need to add the useEffect

                </>
            )
        }
    

    24) Cryptocurrencies.jsx

        import Reacct, {useState, useEffect} from 'react';
        ...

        const Cryptocurrencies = ({simplified}) => {
            
            ...

            const [search, setSearchTerm] = useState('')


            useEffect(() => {
                setCryptos(cryptosList?.data?.coins)

                //Now we want to filter it out by the search term so we can say:
                const filteredData = cryptoList?.data?.coins.filter(
                    (coin) => coin.name.toLowerCase().includes(searchTerm.toLowerCase())
                );

            }, [cryptoList, searchTerm])    // it mean that this useEffect will executed when one of these two values changes!!!

            ...

            return (
                <>
                    div.search-crypto
                        <Input placeholder="Search cryptocurrency onChange={(e) => setSearchTerm(e.target.value)/>  // when we are changing the setSearchTerm we want to do something so we need to add the useEffect

                    ...
                </>
            )
        }
    
    25) Cryptocurrencies.jsx 
        
        ...

        const Cryptocurrencies = ({simplified}) => {
            
            ...

            //const [cryptos, setCryptos] = useState(cryptosList?.data?.coin);

            const [cryptos, setCryptos] = useState([]);     // adding useEffect we need to have an empty array in  here at the start, because useEffect will happen at the start it useState will fill out!

            ...

            useEffect(() => {
                //setCryptos(cryptosList?.data?.coins)    // (1)

                const filteredData = cryptoList?.data?.coins.filter(
                    (coin) => coin.name.toLowerCase().includes(searchTerm.toLowerCase())
                );

                setCryptos(filteredData);       //added (in that case we dont need the (1) because we are setting it right here)

            }, [cryptoList, searchTerm])   // Now component is updated for these two properties!!

            ...
     
        }

        That part is done, we have a searchbar in cryptocurrencies component 
        but if we go to homepage we can see the search bar in there! We dont want that.... how will we remove that??? 
        But how we will do that??? -> props

    

    26) Cryptocurrencies.jsx

        .....

        return(
            <>
                {!simplified && (       // since simplified is false on the homepage that will not show (remember when we have A && B first execute the A if it is true we are going to B!)
                    div.search-crypto
                        <Input placeholder="Search cryptocurrency onChange={(e) => setSearchTerm(e.target.value)/>  // when we are changing the setSearchTerm we want to do something so we need to add the useEffect

                )}


                ...
            
            </>
        )

        And now we have remove the search bar from homepage, it is only at the Cryptocurrencies
        Now Homepage and cryptocurrencies is official done!.


 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    
    
    The point for starting to implement the News, this is a recap
    https://youtu.be/GDa8kZLNhJ4?list=PLAfVrG6PmFJnZjgAeaVJkWx_-XByqOAOy&t=14479

    Note: 
        When do we use '?.' and when '.' ?

        The ?. operator is like the . chaining operator, 
        except that instead of causing an error if a reference is nullish
        (null or undefined), the expression short-circuits with a return value of undefined.


    27) News.jsx

        import React from 'react';
        import {Select, Typography, Row, Col, Avatar, Card } from 'antd';
        import moment from 'moment';   

        const News = () => {
            return (
                <div>
                
                </div>
            )
        }
        export default News;


        Now we have to fetch the News data
        The process will be the same ass cryptocurrencies we need to create a service!

        Create the file src/service/cryptoNewsApi.js


    28) cryptoNewsApi.js (this is are recap of cryptoApi.js)
        We are going to use New headers!!! Go search on rapidapi.com and search for the Bring News Search 
        https://rapidapi.com/microsoft-azure-org-microsoft-cognitive-services/api/bing-news-search1/

        go to the field News Trending and press test endpoint


        import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';


        const cryptoNewsHeaders = {
        'X-BingApis-SDK': 'true',
        'X-RapidAPI-Key': 'bbff6db302mshe9ad257e1c0d6b1p142be7jsn4a1def8fee8a',     // This keys must hiden from other people! we will do that later on
        'X-RapidAPI-Host': 'bing-news-search1.p.rapidapi.com'
        }

        const baseUrl = 'https://bing-news-search1.p.rapidapi.com';     // notice that we dont copy the whole url because we will acess the section that we want to access.

        const createRequest = (url) => ({url, headers: cryptoNewsHeaders});
    

    29) cryptoNewsApi.js

        import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';


        const cryptoNewsHeaders = {
        'X-BingApis-SDK': 'true',
        'X-RapidAPI-Key': 'bbff6db302mshe9ad257e1c0d6b1p142be7jsn4a1def8fee8a',
        'X-RapidAPI-Host': 'bing-news-search1.p.rapidapi.com'
        }

        const baseUrl = 'https://bing-news-search1.p.rapidapi.com';

        const createRequest = (url) => ({url, headers: cryptoNewsHeaders});


        export const cryptoNewsApi = createApi({
            reducerPath:'cryptoNewsApi',
            baseQuery: fetchBaseQuery({baseUrl}),
            endpoints: (builder) => ({
                getCryptoNews: builder.query({
                query: ({newsCategory, count}) => createRequest(`/news/search?q=${newsCategory}&safeSearch=Off&textFormat=Raw&freshness=Day&count=${count}`),
                }) 
            })
        });

        export const { useGetCryptoNewsQuery } = cryptoNewsApi;



        As you can see, there is only a few changes. I still dont know where url came from but it is surely that you must add the search option on url because News is too general, we need to search for currency!
    

    30) News.jsx

        It is the same with cryptocurrencies.jsx with some differences.

        import React from 'react';
        import {Select, Typography, Row, Col, Avatar, Card } from 'antd';
        import moment from 'moment';
        import { useGetCryptoNewsQuery } from '../services/cryptoNewsApi';


        const { Text, Title } = Typography;
        const { Option } = Select;


        const News = ({simplified}) => {

            const count = simplified ? 10 : 100;
            const { data: cryptoNews } = useGetCryptoNewsQuery({ newsCategory: 'Cryptocurrency', count: simplified ? 6 : 12 });

            console.log(cryptoNews)
            
            return (
                <div>
                
                </div>
            )
        }

        export default News;

        We must add the reducer to the store!!! otherwise the redux will tell us to do it!! The errors from redux are pretty simple.



    31) store.js
        import { configureStore } from '@reduxjs/toolkit';
        import { cryptoApi } from '../services/cryptoApi';
        import { cryptoNewsApi } from '../services/cryptoNewsApi';

        export default configureStore({
            reducer: {
                [cryptoApi.reducerPath] : cryptoApi.reducer,
                [cryptoNewsApi.reducerPath] : cryptoNewsApi.reducer,    // added
            },
        });
    


    32) News.jsx    


        const { data: cryptoNews, isFetching } = useGetCryptoNewsQuery({ newsCategory: 'Cryptocurrency', count: simplified ? 6 : 12 });

        console.log(cryptoNews)

        if (isFetching) return 'Loading...';
        // if (!cryptoNews?.value) return 'Loading...';         // you could insead of that to remove isFetching and uncomment this line

        return(
            <div>
                Row gutter=[..]
                    
                    {cryptoNews.value.map((news, i) => (    //
                        Col xs={24} sm={12} lg={8} key={i}      // We need to pass a key which is equal to the index of the array we are mapping over
                            Card 
                                a href={news.url}               // The url provided from api
                                    div.news-image-container 
                                        Title.news-title
                                            news.name           // this taken from the api.
                                        img src={news?.image?.thumbnail?.contentUrl || demoImage}   // demoImage is the case when the article dont have any Image, 
                                        // Why we used so questions marks? it is because there is the url for img, press f12 to find it the variable member on the Object which came from api

                                    p
                                        {news.description > 100 
                                            ?  `${news.description.substring(0, 100)}...`   // if the string is longer than 100 characters cut it off.
                                            : news.description
                                        }
                                    
                                    div.provider-container
                                        Avatar  -> Avatr component is like img tag
                                        Text.provider-name 
                                            {news.provider[0]?.name}
                                        Text
                                            {moment(news.datePublished).startOf('ss').fromNow()}



                    ))

                    }
                
            </div>
        )



    33) News.jsx 
        Implement a search bar for taking new sonly for one cryptocurrency that you intresting on 

        ... 

        Row 
            {!simplified && (       // if we aren't on homepage render the follow code

                Col span={12}
                    <Select
                        showSearch  // for typing and find more fast what do you want, if we remove that we won't able to type, we will just select the option
                        className="select-news"
                        placeholder="Select a Crypto" 
                        optionFIlterProp="children"
                        onChange={(value) => console.log(value)}
                        filterOptions={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}  // this filter the options so that we only show the one for our selected cryptocurrency 
                        >

                        // we will add code here
                    </Select>
            )}
    


    34) News.jsx
        Now we need to create a state

        const News = ({simplified}) => {

            ....

            const [newsCategory, setNewsCategory] = useState('Cryptocurrency'); // added

            .....

            return(

                Row 
                    {!simplified && (       // if we aren't on homepage render the follow code

                        Col span={12}
                            <Select             // that will show us a search bar based on options tags!!
                                showSearch       // for typing and find more fast what do you want, if we remove that we won't able to type, we will just select the option
                                className="select-news"
                                placeholder="Select a Crypto" 
                                optionFilterProp="children"
                                onChange={(value) => console.log(value)}
                                filterOptions={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}  // this filter the options so that we only show the one for our selected cryptocurrency 
                                >

                                Option value="Cryptocurrency"
                                    Cryptocurrency              // But we want to get real option about the currencies, and remember we already have all the names of all the cryptocurrencies on Cryptocurrencies.jsx or on our Homepage.jsx


                            </Select>
                    )}
        }


        // So how we will get the real options for cryptocurrencies
    

    35) News.jsx

        const News = ({simplified}) => {

        ....

        const { data: cryptosList} = useGetCryptosQuery(100);    // added        

        .....

        return(

            Row 
                {!simplified && (       // if we aren't on homepage render the follow code

                    Col span={24}       // we added here 24 because we want to take place to all the screen
                        <Select             // that will show us a search bar based on options tags!!
                            showSearch       // for typing and find more fast what do you want, if we remove that we won't able to type, we will just select the option
                            className="select-news"
                            placeholder="Select a Crypto" 
                            optionFilterProp="children"
                            //onChange={(value) => console.log(value)}      // this will show us just the currencies
                            onChange={(value) => console.log(value)}        // with this when we press the option we will show us only the specific currency
                            filterOptions={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}  // this filter the options so that we only show the one for our selected cryptocurrency 
                            >

                            // Option value="Cryptocurrency"
                            //   Cryptocurrency                     // I dont want to show us the default option
                            {
                                data?.data?.coins.map((coin) => <Option value={coin.name}> {coin.name} </Option>)
                            }     // get all the names of the cryptocurrencies


                        </Select>
                )}
        }
    
    So we are done with the New.jsx
    Now we want to learn more about cryptocurrencies, we dont have just a card with 3 lines.....

 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


    36) CryptoDetails.jsx
        import React from 'react';
        import HTMLReactParser from 'html-react-parser';
        import { useParams } from 'react-router-dom';   //useParams takes the id in the url and allows you to use it as a variable.
        import millify from 'millify';
        import { Col, Row, Typography, Select } from 'antd';
        
        // Icons!!
        import { MoneyCollectOutlined, DollarCircleOutlined, FundOutlined, ExclamationCircleOutlined, StopOutlined, TrophyOutlined, CheckOutlined, NumberOutlined, ThunderboltOutlined } from '@ant-design/icons';


        const {Title, Text} = Typography;
        const { Option } = Select;


        const CryptoDetails = () => {
            return (
                <div>
                    CryptoDetails
                </div>
            )
        }

        export default CryptoDetails;
    



    37) CryptoDetails.jsx

        const CryptoDetails = () => {
            const {coinId} = useParams()        //added to know which currency taking a look at
            //useParams taks the id in the url and allows you to use it as a variable.

            return (
                <div>
                    CryptoDetails {coinId}      // so that will display the id next to CryptoDetails, on the output we will have something like this:  CryptoDetails Qwsogvtv82FCd
                </div>
            )
        }

        But how did it find the coinId. to answer that you must think how did you go to CryptoDetails??
        At cryptocurrency we have the line 
            <Link key={currency.uuid} to={`/crypto/${currency.uuid}`}>
            based on that specific crypto coin you go to the CryptoDetails


    38) CryptoDetails.jsx
        Take the id for each coin

        const CryptoDetails = () => {
            const {coinId} = useParams()      
            const { timePeriod, setTimePeriod } = useState('7d');   //added

            return (
                <div>
                    CryptoDetails {coinId}      // so that will display the id next to CryptoDetails, on the output we will have something like this:  CryptoDetails Qwsogvtv82FCd
                </div>
            )
        }

        But how we will actually take the data for each coin?
        We need to add another api service on cryptoApi.js!!!

    

    39) cryptoApi.js
        Add the end point for taking cryptodetails

        endpoints: (builder) => ({
            getCryptos: builder.query({
                query: (count) => createRequest(`coins?limit=${count}`),
            }),
            getCryptoDetails: builder.query({
                query: (coinId) => createRequest(`/coin/${coinId}`),
            }),
        })
    
        export const { useGetCryptosQuery, useGetCryptoDetailsQuery } = cryptoApi;


    40) CryptoDetails.jsx   (45:25:17)
        Add the service

        ...

        import { useGetCryptoDetailsQuery } from '../services/'

        ...

        const CryptoDetails = () => {
            ....
            const { data, isFetching } = useGetCryptoDetailsQuery(coinId);  // and here we get all the data about a specific currency

            console.log(data) //now we can see all the information about the specific coin

            ...

        }

        

        But how we will use these information??
    

    41) CryptoDetails.jsx
        Use the data for each coin  

        ....

        const cryptoDetails = data?.data?.coin;

        const time = ['3h', '24h', '7d', '30d', '1y', '3m', '3y', '5y'];        //array of time

        const stats = [     // we jusst use differences titles, values and icons

        ]

        const genericStats = [

        ]

        ..
        return(
            ...
        )

        Now we have the data on the vriable cryptoDetails so we will map the data over the arrays format


    42) CryptoDetails.jsx
        Build the layout


        ....

        return (

            Col
                Col
                    Title 
                        {cryptoDetails?.name} {cryptoDetails?.symbol} Price   // symbol means alternativee names for that crypto currency you can find it on the console if you console.log(data)

                    p 
                    {cryptoDetails?.name} live price in US dolars       // without ?. it cause error!!! be carefull
                    View value statistics, market cap and suply
                
                <Select 
                    // showSearch //is for write what do you want to find! we dont need that option here
                    defaultValue = "7d" 
                    className="select-timeperiod"
                    //placeholder="Select Time Period"    // we have the default value, why do we need the place holder??? We dont
                    onChange={(value) => setTimePeriod(value)}
                >
                    {time.map((date) => <Option key={date}> {date} </Option>)}

                </Select>
        )
    

    43) CryptoDetails.jsx

        return (
            ....

            Col 
                ...

                <Select> 
                    ...
                </Select>

                //--------------------- for statist for the specific coin -----------------

                Col.stats-container 
                    Col.coin-value-statistcs
                        Col.coin-value-statistics-heading
                            Title.coin-details
                                {cryptoDetails.name} Value Statistics

                            p
                                An overview showing the statistics of {cryptoDetails.name}, 
                                such as the base and quote currency, the rank, and trading volume.
                        
                        {stats.map(({ icon, title, value }) => (
                            Col className="coin-stats">
                                Col className="coin-stats-name"
                                    Text
                                        {icon}
                                    Text 
                                        {title}
                                Text className="stats"
                                    {value}
                        ))}



                    //--------------  For generic statistics (it is a copy paste from the above lines) -----------------

                    Col.other-stats-info
                        Col.coin-value-statistics-heading
                            Title.coin-details
                                Other Statistics

                        {genericStats.map(({ icon, title, value }) => (
                            Col className="coin-stats">
                                Col className="coin-stats-name"
                                    Text
                                        {icon}
                                    Text 
                                        {title}
                                Text className="stats"
                                    {value}
                        ))}
            
            // Show all the statistics links

            Col className="coin-desc-link"
                Row className="coin-desc"
                    Title className = "coin-details-headig"
                        What is {cryptoDetails.name}
                        {HTMLReactParser(cryptoDetails.description)}    // with that we have all the documenetns with the Titles
                
                <Col className="coin-links"> 
                    <Title level={3} className="coin-details-heading">
                        {cryptoDetails?.name} Links

                    {cryptoDetails?.links.map((link) => (
                    <Row className="coin-link" key={link.name}>

                        <Title level={5} className="link_name">
                            {link.type}

                        <a href={link.url} target="_blnk" rel="noreffer">
                            {link.name}
                    ))}

        )

    
    44) CryptoDetails.jsx 
            Create the Line Chart!!! 
        return(

            ... 

            <Select>
                ... 
            </Select

            {line chart}        // that will show you each time which changes the price of the bitcoin

            <Col className="stats-container">
                ... 

            </Col>
        )   

        To do that we need to create a Component chart 
        Create the file: src/components/LineChart.jsx
    
    45) LineChart.jsx
        import React from 'react';
        import { Line } from 'react-chartjs-2';
        import { Col, Row, Typography } from 'antd';


        const { Title } = Typography;


        const LineCharts = () => {
        return (
            <div>
            
            </div>
        )
        }

        export default LineCharts
    

    46) CryptoDetails.jsx
        Add the component to the cryptoDetails

        import LineChart form './LineChart'
        ...

        return(

            ... 

            <Select>
                ... 
            </Select

            <LineChart 
                contHistory={coinHistory}   // we dont have that, it is an addition api that we have to create
                currentPrice={millify(cryptoDetaols.price)}
                container={cryptoDetails.name}

            />  

            <Col className="stats-container">
                ... 
            </Col>
        )   

        Now we have everything beside the coinHistory, we will go to create it!
    
    
    
    47) cryptoApi.js

        ....

        getCryptoHistory: builder.query({
            query: (coinId, timePeriod) => createRequest(`/coin/${coinId}/history/${timepPeriod}`),
        })

        ....

        export const { useGetCryptosQuery, useGetCryptoDetailsQuery, useGetCryptoHistoryQuery} = cryptoApi;


    48) CryptoDetails.jsx
        ...
        import { useGetCryptoDetailsQuery, useGetCryptoHistoryQuery } from '../services/cryptoApi'

        ...


        const { data } = useGetCryptoHistoryQuery({coinId, timePeriod});    //instead of coinId we are passing a object that contain coinId and timePeriod

        ...

        return(

            ... 

            <Select>
                ... 
            </Select

            <LineChart 
                contHistory={coinHistory}   // we dont have that, it is an addition api that we have to create
                currentPrice={millify(cryptoDetaols.price)}
                container={cryptoDetails.name}

            />  

            <Col className="stats-container">
                ... 
            </Col>
        )   
    

    49) LineChart.jsx

        const coinPrice = [];
        const coinTimestamp = [];

        for (let i = 0; i < coinHistory?.data?.history?.length; i += 1) {       // go to the end of the coin history to take the option value that we are using below!
            coinPrice.unshift(coinHistory.data.history[i].price)       // so we push each price one by one into this new coin price array
            //coinTimestamp.push(coinHistory.data.history[i].timestamp)       // we are doing the same for the timeStamp
            coinTimestamp.unshift(new Date(coinHistory.data.history[i].timestamp).toLocaleDateString())    // making this more readable!
        } // unshift is like push but it will keep the dates in order! 

        
          const data = {
            labels: coinTimestamp,
            datasets: [
                {
                    label: 'Price in USD',
                    data: coinPrice, 
                    fill: false,
                    backgroundColor: '#00071bd',
                    borderColor: '#0071bd'
                }
            ]
        };

        const options = {
            scales: {
                yAxes: {
                    {
                        ticks: {
                            beginAtZero: true
                        }, 
                    },
                },
            },
        };
        return (
            <>
                <Row className="chart-header">
                    <Title level={2} className="chart-title">
                    {coinName} Price Chart
                    </Title>
                    Col className="price-container"
                    Title level={5} className="price-change" 
                        {coinHistory?.data?.change}%
                    Title level={5} className="current-price"
                        Current {coinName} Price %
                    Col
                </Row>
                <Line data={data} options={options}/>

            </>
        )  


    Error: when the graph loadin the page is vanished. / I copy pasted the code from  https://github.com/yusin99/crypto-react/tree/master/src
    files: CryptoDetails.jsx, LlineChart.jsx, Cryptocurrencies.jsx


    The problem now is that when we put our web site on small screen, the navigation bar go on top right corner of the page.
    How we will fix that???


    50) Navbar.jsx
        Fix the issue with navigation bar

        import React, {useState, useEffect} from 'react';       // these 2 hooks(useState, useEffect) will help us!
        
        const Navbar = () => {

            const [activeMenu, setActiveMenu] = useState(true);
            const [screenSize, setScreenSize] = useState(null);

            useEffect(() =>{
                const handleResize = () => setScreenSize(window.innerWidth);    //get the width of the screen

                window.addEventListener('resize', handleResize); //every time when the window resizes we want to handle the resize
                
                handleResize();

                return () => window.removeEventListener('resize', handleResize);
            }, []);


            useEffect(() => {
                if(screenSize < 768) {      // if the screen size is lower thatn 768 pixels (elts say that is for mobile/tablet size devices)
                    setActiveMenu(false);   
                } else {
                    setActiveMenu(true);
                }
            }, [screenSize]);       // this useEffect will called whenever the screen size changes!.

            // So now we have this activeMenu and we can use this variable to make some changes
        }
    

    51) Navbar.jsx
        Use the activeMenu variable 



        ...

        return ( 

            div className = "nav-container"

                ...

                div className="logo-container"

                    ...

                div

                {aciveMenu && (         // we are going to only show this menu when the active menu is true

                    Menu theme="dark"
                        ...
                    Menu
                )}  

        );
    
    52) Navbar.jsx
        Add a Button


        ...

        return ( 

            div className = "nav-container"
                ...

                div className="logo-container"
                        ...
                    Typography.Title
                        ...
                    Typography.Title

                    <Button className="menu-control-container" onClick={() => setActiveMenu(true)}>            //   added
                        <MenuOutlined/>     // icon for menu
                    </Button>       

                div

                {aciveMenu && (         // we are going to only show this menu when the active menu is true

                    Menu theme="dark"
                        ...
                    Menu
                )}  

        );


        Right now the menu it doesn't hide it only opens.
    

    53) Navbar.jsx
        Make the menu to hide!



        ....

        <Button className="menu-control-container" onClick={() => setActiveMenu(!activeMenu)}>      // activeMenu is a boolean variable, whenw we do that we just change the value of it.         //   added
            <MenuOutlined/>     // icon for menu
        </Button>     

        ....

        And we are done with that 


    54) Loader.jsx

        import React from "react";
        import { Spin } from "antd";

        const Loader = () => (
            <div className="loader">
                <Spin />
            </div>
        );

        export default Loader;
    

    And you have to do the exchanges component!!! ALONE!


    55) Deploy the project on web!
        netlify
        connect  and draw your build folder on sites!! 

        But how do you build your build folder??


    56) Build your build Folder! 
        npm run build


    And here we are, the site is uploaded!!!
    https://cryptoapp-by-nikossrp.netlify.app/



end: https://youtu.be/GDa8kZLNhJ4?list=PLAfVrG6PmFJnZjgAeaVJkWx_-XByqOAOy&t=18250